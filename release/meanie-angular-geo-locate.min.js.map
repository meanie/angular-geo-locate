{"version":3,"sources":["meanie-angular-geo-locate.min.js","geoLocate.service.js"],"names":["window","angular","undefined","module","factory","$q","$window","$location","$rootScope","options","reason","navigator","geolocation","protocol","$broadcast","reject","deferred","defer","getCurrentPosition","position","$apply","resolve","error","code","promise"],"mappings":"CAMA,SAAWA,EAAQC,EAASC,GCD5B,YDQED,GCFAE,OAAO,wBDONC,QCFG,cAAS,KAAA,UAAA,YAAA,aAAA,SAAAC,EAAAC,EAAAC,EAAAC,GDGX,MAAO,UAAmBC,GACxB,GAAIC,ECWN,IAVEJ,EAASK,UAAAC,YAKa,SAAtBL,EAAWM,aACXH,EAAU,oBDHRA,EAAS,qBCOTA,EDIA,MADAF,GAAWM,WAAW,oBAAqBJ,GACpCL,EAAGU,OAAOL,EAInB,ICFAM,GAAWX,EAAAY,ODoCX,OA/BAX,GAAQK,UAAUC,YAAYM,mBAAmB,SAAUC,GAGzDX,EAAWM,WAAW,uBAAwBK,GCDhDX,EAAIY,OAAA,WACJJ,EAAQK,QAAMF,MDIX,SCFCG,GDKF,GCFEZ,EDGF,QCFEY,EAAAC,MACF,IAAK,GACHb,EAAS,kBACT,MDGA,KAAK,GACHA,EAAS,qBACT,MCDN,KAAA,GACAA,EAAW,UDOTF,EAAWM,WAAW,oBAAqBJ,GCD/CF,EAAOY,OAAS,WDGVJ,EAASD,OAAOL,MCCvBD,GDIUO,EAASQ,aAGnBxB,OAAQA,OAAOC","file":"meanie-angular-geo-locate.min.js","sourcesContent":["/**\n * meanie-angular-geo-locate * https://github.com/meanie/angular-geo-locate\n *\n * Copyright (c) 2016 Adam Reis <adam@reis.nz>\n * License: MIT\n */\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('GeoLocate.Service', [])\n\n  /**\n   * Service definition\n   */\n  .factory('$geoLocate', ['$q', '$window', '$location', '$rootScope', function ($q, $window, $location, $rootScope) {\n    return function geoLocate(options) {\n      var reason;\n\n      //Check if available\n      if (!$window.navigator.geolocation) {\n        reason = 'unsupportedBrowser';\n      }\n\n      //Check if on https (see https://goo.gl/rStTGz)\n      else if ($location.protocol() === 'http') {\n          reason = 'deprecatedOnHttp';\n        }\n\n      //If error reason present, reject\n      if (reason) {\n        $rootScope.$broadcast('geoLocation.error', reason);\n        return $q.reject(reason);\n      }\n\n      //Create deferred\n      var deferred = $q.defer();\n\n      //Geolocate\n      $window.navigator.geolocation.getCurrentPosition(function (position) {\n\n        //Broadcast position and resolve promise\n        $rootScope.$broadcast('geoLocation.position', position);\n        $rootScope.$apply(function () {\n          deferred.resolve(position);\n        });\n      }, function (error) {\n\n        //Determine reason\n        var reason;\n        switch (error.code) {\n          case 1:\n            reason = 'permissionDenied';\n            break;\n          case 2:\n            reason = 'positionUnavailable';\n            break;\n          case 3:\n            reason = 'timeout';\n            break;\n        }\n\n        //Broadcast error and reject promise\n        $rootScope.$broadcast('geoLocation.error', reason);\n        $rootScope.$apply(function () {\n          deferred.reject(reason);\n        });\n      }, options);\n\n      //Return promise\n      return deferred.promise;\n    };\n  }]);\n})(window, window.angular);","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('GeoLocate.Service', [])\n\n/**\n * Service definition\n */\n.factory('$geoLocate', function($q, $window, $location, $rootScope) {\n  return function geoLocate(options) {\n    var reason;\n\n    //Check if available\n    if (!$window.navigator.geolocation) {\n      reason = 'unsupportedBrowser';\n    }\n\n    //Check if on https (see https://goo.gl/rStTGz)\n    else if ($location.protocol() === 'http') {\n      reason = 'deprecatedOnHttp';\n    }\n\n    //If error reason present, reject\n    if (reason) {\n      $rootScope.$broadcast('geoLocation.error', reason);\n      return $q.reject(reason);\n    }\n\n    //Create deferred\n    var deferred = $q.defer();\n\n    //Geolocate\n    $window.navigator.geolocation.getCurrentPosition(function(position) {\n\n      //Broadcast position and resolve promise\n      $rootScope.$broadcast('geoLocation.position', position);\n      $rootScope.$apply(function() {\n        deferred.resolve(position);\n      });\n    }, function(error) {\n\n      //Determine reason\n      var reason;\n      switch (error.code) {\n        case 1:\n          reason = 'permissionDenied';\n          break;\n        case 2:\n          reason = 'positionUnavailable';\n          break;\n        case 3:\n          reason = 'timeout';\n          break;\n      }\n\n      //Broadcast error and reject promise\n      $rootScope.$broadcast('geoLocation.error', reason);\n      $rootScope.$apply(function() {\n        deferred.reject(reason);\n      });\n    }, options);\n\n    //Return promise\n    return deferred.promise;\n  };\n});\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}