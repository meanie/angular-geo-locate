{"version":3,"sources":["geoLocate.service.js","meanie-angular-geo-locate.min.js"],"names":["window","angular","undefined","module","factory","$q","$window","$rootScope","options","navigator","geolocation","reason","$broadcast","reject","deferred","defer","getCurrentPosition","position","$apply","resolve","error","code","promise"],"mappings":"CAOA,SAAAA,EAAAC,EAAAC,GAAA,YAKAD,GAAAE,OAAA,wBAKAC,QAAA,cAAA,KAAA,UAAA,aAAA,SAAAC,EAAAC,EAAAC,GACA,MAAA,UAAAC,GAGA,IAAAF,EAAAG,UAAAC,YAAA,CACA,GAAAC,GAAA,oBAEA,OADAJ,GAAAK,WAAA,oBAAAD,GACAN,EAAAQ,OAAAF,GAIA,GAAAG,GAAAT,EAAAU,OCkCI,OD/BJT,GAAAG,UAAAC,YAAAM,mBAAA,SAAAC,GAGAV,EAAAK,WAAA,uBAAAK,GACAV,EAAAW,OAAA,WACAJ,EAAAK,QAAAF,MAEA,SAAAG,GAGA,GAAAT,EACA,QAAAS,EAAAC,MACA,IAAA,GACAV,EAAA,kBACA,MACA,KAAA,GACAA,EAAA,qBACA,MACA,KAAA,GACAA,EAAA,UAKAJ,EAAAK,WAAA,oBAAAD,GACAJ,EAAAW,OAAA,WACAJ,EAAAD,OAAAF,MAEAH,GCGWM,EAASQ,aAIjBtB,OAAQA,OAAOC","file":"meanie-angular-geo-locate.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('GeoLocate.Service', [])\n\n/**\n * Service definition\n */\n.factory('$geoLocate', ['$q', '$window', '$rootScope', function($q, $window, $rootScope) {\n  return function geoLocate(options) {\n\n    //Check if available\n    if (!$window.navigator.geolocation) {\n      var reason = 'unsupportedBrowser';\n      $rootScope.$broadcast('geoLocation.error', reason);\n      return $q.reject(reason);\n    }\n\n    //Create deferred\n    var deferred = $q.defer();\n\n    //Geolocate\n    $window.navigator.geolocation.getCurrentPosition(function(position) {\n\n      //Broadcast position and resolve promise\n      $rootScope.$broadcast('geoLocation.position', position);\n      $rootScope.$apply(function() {\n        deferred.resolve(position);\n      });\n    }, function(error) {\n\n      //Determine reason\n      var reason;\n      switch (error.code) {\n        case 1:\n          reason = 'permissionDenied';\n          break;\n        case 2:\n          reason = 'positionUnavailable';\n          break;\n        case 3:\n          reason = 'timeout';\n          break;\n      }\n\n      //Broadcast error and reject promise\n      $rootScope.$broadcast('geoLocation.error', reason);\n      $rootScope.$apply(function() {\n        deferred.reject(reason);\n      });\n    }, options);\n\n    //Return promise\n    return deferred.promise;\n  };\n}]);\n\n})(window, window.angular);\n","/**\n * meanie-angular-geo-locate - v0.2.1 - 17-6-2015\n * https://github.com/meanie/angular-geo-locate\n *\n * Copyright (c) 2015 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\n!function(o,e,r){\"use strict\";e.module(\"GeoLocate.Service\",[]).factory(\"$geoLocate\",[\"$q\",\"$window\",\"$rootScope\",function(o,e,r){return function(t){if(!e.navigator.geolocation){var n=\"unsupportedBrowser\";return r.$broadcast(\"geoLocation.error\",n),o.reject(n)}var a=o.defer();return e.navigator.geolocation.getCurrentPosition(function(o){r.$broadcast(\"geoLocation.position\",o),r.$apply(function(){a.resolve(o)})},function(o){var e;switch(o.code){case 1:e=\"permissionDenied\";break;case 2:e=\"positionUnavailable\";break;case 3:e=\"timeout\"}r.$broadcast(\"geoLocation.error\",e),r.$apply(function(){a.reject(e)})},t),a.promise}}])}(window,window.angular);\n//# sourceMappingURL=meanie-angular-geo-locate.min.js.map"],"sourceRoot":"/source/"}